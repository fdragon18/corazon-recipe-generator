// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

// レシピ生成リクエスト履歴
model RecipeRequest {
  id                String            @id @default(cuid())
  shop              String            // Shopifyストアドメイン
  customerId        String?           // Shopify Customer ID（参照のみ）
  condition         String            @db.Text // 体調・お悩み
  needs             String?           @db.Text // 食事注意事項
  kojiType          String?           // 麹製品種類
  otherIngredients  String?           @db.Text // その他食材
  createdAt         DateTime          @default(now())
  recipes           GeneratedRecipe[]

  @@index([shop])
  @@index([customerId])
  @@index([createdAt])
}

// 生成されたレシピ
model GeneratedRecipe {
  id            String           @id @default(cuid())
  requestId     String           // RecipeRequestとの関連
  name          String           // レシピ名
  ingredients   Json             // 材料（オブジェクト配列形式: [{ item: "...", amount: 数値, unit: "g" }]）
  steps         Json             // 手順（オブジェクト配列形式: [{ step_number: 1, description: "..." }]）
  benefit       String           @db.Text // 効果
  nutrition     Json?            // 栄養価情報（PFC + ナトリウム + カロリー）
  comparison    Json?            // 従来レシピとの比較データ（減塩効果など）
  likeCount     Int              @default(0) // いいね数（キャッシュ用）
  favoriteCount Int              @default(0) // お気に入り数（キャッシュ用）
  createdAt     DateTime         @default(now())
  request       RecipeRequest    @relation(fields: [requestId], references: [id], onDelete: Cascade)
  likes         RecipeLike[]     // いいねリレーション
  favorites     RecipeFavorite[] // お気に入りリレーション

  @@index([requestId])
  @@index([createdAt])
  @@index([likeCount])
  @@index([favoriteCount])
}

// レシピへのいいね
model RecipeLike {
  id         String          @id @default(cuid())
  recipeId   String          // GeneratedRecipeへの参照
  customerId String          // Shopify Customer ID
  createdAt  DateTime        @default(now())
  recipe     GeneratedRecipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, customerId]) // 1顧客1レシピ1いいね
  @@index([customerId])
  @@index([recipeId])
  @@index([createdAt])
}

// レシピのお気に入り
model RecipeFavorite {
  id         String          @id @default(cuid())
  recipeId   String          // GeneratedRecipeへの参照
  customerId String          // Shopify Customer ID
  createdAt  DateTime        @default(now())
  recipe     GeneratedRecipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, customerId]) // 1顧客1レシピ1お気に入り
  @@index([customerId])
  @@index([recipeId])
  @@index([createdAt])
}

// 日本食品成分表 + MURO製品
model JapaneseFood {
  id          String   @id @default(cuid())
  foodCode    String?  @unique // 食品番号（文科省データ）
  name        String   // 食品名
  nameKana    String?  // ふりがな
  category    String?  // 分類

  // 栄養素（100gあたり）
  energyKcal  Decimal? @db.Decimal(6, 1) // カロリー (kcal)
  protein     Decimal? @db.Decimal(5, 2) // タンパク質 (g)
  fat         Decimal? @db.Decimal(5, 2) // 脂質 (g)
  carbs       Decimal? @db.Decimal(5, 2) // 炭水化物 (g)
  sodium      Decimal? @db.Decimal(6, 1) // ナトリウム (mg)

  // Phase 1: よく使う栄養素
  fiber       Decimal? @db.Decimal(5, 2) // 食物繊維 (g)
  potassium   Decimal? @db.Decimal(6, 1) // カリウム (mg)
  calcium     Decimal? @db.Decimal(6, 1) // カルシウム (mg)
  iron        Decimal? @db.Decimal(5, 2) // 鉄 (mg)
  vitaminC    Decimal? @db.Decimal(5, 1) // ビタミンC (mg)
  vitaminA    Decimal? @db.Decimal(6, 1) // ビタミンA (μg)
  vitaminD    Decimal? @db.Decimal(5, 2) // ビタミンD (μg)
  vitaminB1   Decimal? @db.Decimal(5, 2) // ビタミンB1 (mg)
  vitaminB2   Decimal? @db.Decimal(5, 2) // ビタミンB2 (mg)
  cholesterol Decimal? @db.Decimal(5, 1) // コレステロール (mg)
  saltEquiv   Decimal? @db.Decimal(5, 2) // 食塩相当量 (g)

  // 検索用
  searchText  String?  @db.Text // 全文検索用（名前+カナ+カテゴリ）

  // MURO製品フラグ
  isMuroProduct Boolean @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@index([isMuroProduct])
}

// 日本人の食事摂取基準（2025年版）- 厚生労働省
model NutritionStandard {
  id             String   @id @default(cuid())
  sex            String   // "male" | "female" | "pregnant" | "lactating"
  ageRange       String   // 元データ（例: "18-29(歳)", "3-5(歳)"）
  ageMin         Int      // 年齢範囲の最小値
  ageMax         Int      // 年齢範囲の最大値

  // エネルギー（身体活動レベル別） kcal/日
  energyLow      Int?
  energyModerate Int?
  energyHigh     Int?

  // 炭水化物
  carbohydrateTarget String? // 元データ（例: "50-65"）
  carbohydrateMin    Float?  // % エネルギー
  carbohydrateMax    Float?  // % エネルギー
  fiberTarget        Float?  // 食物繊維目標 (g/日)

  // タンパク質
  proteinRequired   Float?  // 必要量 (g/日)
  proteinRecommended Float? // 推奨量 (g/日)
  proteinAdequate   Float?  // 目安量 (g/日)
  proteinTarget     String? // 元データ（例: "13-20"）
  proteinTargetMin  Float?  // % エネルギー
  proteinTargetMax  Float?  // % エネルギー

  // 脂質
  fatAdequate          Float?  // 目安量 (g/日)
  fatTargetMin         Float?  // 目標下限 (% エネルギー)
  fatTargetMax         Float?  // 目標上限 (% エネルギー)
  saturatedFatTarget   Float?  // 飽和脂肪酸目標 (% エネルギー)
  n6FattyAcidAdequate  Float?  // n-6系脂肪酸目安 (g/日)
  n3FattyAcidAdequate  Float?  // n-3系脂肪酸目安 (g/日)

  // ビタミン（脂溶性）
  vitaminARecommended  Float? // μgRAE/日
  vitaminAUpperLimit   Float? // μgRAE/日
  vitaminDAdequate     Float? // μg/日
  vitaminDUpperLimit   Float? // μg/日
  vitaminEAdequate     Float? // mg/日
  vitaminEUpperLimit   Float? // mg/日
  vitaminKAdequate     Float? // μg/日

  // ビタミン（水溶性）
  vitaminB1Recommended     Float? // mg/日
  vitaminB2Recommended     Float? // mg/日
  niacinRecommended        Float? // mgNE/日
  niacinUpperLimit         Float? // mgNE/日
  vitaminB6Recommended     Float? // mg/日
  vitaminB6UpperLimit      Float? // mg/日
  vitaminB12Adequate       Float? // μg/日
  folateRecommended        Float? // μg/日
  folateUpperLimit         Float? // μg/日
  pantothenicAcidAdequate  Float? // mg/日
  biotinAdequate           Float? // μg/日
  vitaminCRecommended      Float? // mg/日

  // ミネラル
  sodiumTarget            Float? // g/日
  potassiumAdequate       Float? // mg/日
  potassiumTarget         Float? // mg/日
  calciumRecommended      Float? // mg/日
  calciumUpperLimit       Float? // mg/日
  magnesiumRecommended    Float? // mg/日
  magnesiumUpperLimit     Float? // mg/日
  phosphorusAdequate      Float? // mg/日
  phosphorusUpperLimit    Float? // mg/日

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sex, ageMin, ageMax])
  @@index([sex])
  @@index([ageMin])
}
