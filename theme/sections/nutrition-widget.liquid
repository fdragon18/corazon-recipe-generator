<!-- sections/nutrition-widget.liquid -->
<!-- 既存のページフォームにフローティングボタンを追加 -->

<style>
  /* 既存のスタイルをそのまま維持 */
  .koji-recipe-container {
    width: 100%;
    max-width: 900px;
    margin: 60px auto;
    padding: 20px;
    font-family: 'Noto Sans JP', 'Helvetica Neue', Arial, sans-serif;
  }

  .card {
    background-color: rgb(255, 255, 255);
    border: 1px solid rgb(202, 202, 202);
    padding: 40px;
    margin-bottom: 30px;
  }

  .main-feature-card {
    background: #F5F5F5;
    border: none;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  }

  .card-title {
    font-size: 24px;
    font-weight: 400;
    color: #333333;
    margin-bottom: 24px;
    text-align: center;
    letter-spacing: 0.08em;
    line-height: 1.6;
  }

  .card-subtitle {
    font-size: 14px;
    color: #666666;
    line-height: 1.8;
    margin-bottom: 30px;
    text-align: center;
    font-weight: 300;
  }

  .text-note {
    font-size: 12px;
    color: #999999;
    display: block;
    margin-top: 12px;
    line-height: 1.6;
  }

  .form-group {
    margin-bottom: 28px;
  }

  /* ポップアップウィンドウのスタイル */
.form-popup-window {
  display: none;
  position: fixed;
  bottom: 100px;
  right: 30px;
  width: 450px;
  max-height: 80vh;
  background: white;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
  z-index: 9998;
  overflow: hidden;
}

.form-popup-window.active {
  display: block;
  animation: slideUp 0.3s ease;
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.form-popup-header {
  background: #f5f5f5;
  padding: 20px;
  border-bottom: 1px solid #e0e0e0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.form-popup-body {
  padding: 30px;
  max-height: calc(80vh - 80px);
  overflow-y: auto;
}

.form-close-btn {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #999;
}

  label {
    display: block;
    font-size: 13px;
    font-weight: 400;
    color: #333333;
    margin-bottom: 8px;
    letter-spacing: 0.03em;
  }

  input[type="text"],
  textarea,
  select {
    width: 100%;
    padding: 12px 16px;
    border: 1px solid #D4D4D4;
    border-radius: 0;
    font-size: 14px;
    transition: border-color 0.2s ease;
    background-color: #FFFFFF;
    font-family: inherit;
  }

  input[type="text"]:focus,
  textarea:focus,
  select:focus {
    outline: none;
    border-color: #999999;
  }

  textarea {
    min-height: 100px;
    resize: vertical;
    line-height: 1.6;
  }

  select {
    cursor: pointer;
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='10' height='6' viewBox='0 0 10 6'%3E%3Cpath fill='%23666' d='M5 6L0 0h10z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 16px center;
    padding-right: 40px;
  }

  .submit-button {
    background: #333333;
    color: #FFFFFF;
    font-weight: 400;
    padding: 16px 48px;
    border: none;
    transition: all 0.2s ease;
    cursor: pointer;
    display: block;
    margin: 40px auto 0;
    font-size: 14px;
    letter-spacing: 0.1em;
    text-transform: uppercase;
  }

  .submit-button:hover:not(:disabled) {
    background: #000000;
  }

  .submit-button:disabled {
    background: #CCCCCC;
    cursor: not-allowed;
  }

  /* ローディング */
  .loading-container {
    text-align: center;
    padding: 40px 0;
  }

  .loading-spinner {
    border: 2px solid #F0F0F0;
    border-top: 2px solid #333333;
    border-radius: 50%;
    width: 32px;
    height: 32px;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .loading-text {
    font-size: 13px;
    color: #666666;
    letter-spacing: 0.05em;
  }

  .hidden {
    display: none !important;
  }

  .error-container {
    background: #FFF5F5;
    border: 1px solid #FFE0E0;
    padding: 20px;
    margin-top: 20px;
    text-align: center;
  }

  .error-text {
    color: #D00000;
    font-size: 13px;
    margin: 0;
  }

  /* レシピモーダル */
  .recipe-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9999;
    overflow-y: auto;
  }

  .recipe-modal.active {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-content {
    background: #FFFFFF;
    max-width: 720px;
    width: 90%;
    max-height: 85vh;
    overflow-y: auto;
    position: relative;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }

  .modal-header {
    padding: 30px;
    border-bottom: 1px solid #E5E5E5;
    position: relative;
  }

  .modal-title {
    font-size: 20px;
    font-weight: 400;
    text-align: center;
    margin: 0;
    color: #333333;
    letter-spacing: 0.08em;
  }

  .modal-close {
    position: absolute;
    top: 20px;
    right: 20px;
    background: none;
    border: none;
    color: #999999;
    width: 32px;
    height: 32px;
    font-size: 24px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: color 0.2s ease;
    padding: 0;
    line-height: 1;
  }

  .modal-close:hover {
    color: #333333;
  }

  .modal-body {
    padding: 40px;
  }

  .recipe-page {
    display: none;
  }

  .recipe-page.active {
    display: block;
  }

  .recipe-name {
    font-size: 18px;
    font-weight: 400;
    color: #333333;
    margin-bottom: 30px;
    padding-bottom: 20px;
    border-bottom: 1px solid #E5E5E5;
    letter-spacing: 0.05em;
  }

  .recipe-section {
    margin-bottom: 32px;
  }

  .recipe-section-title {
    font-size: 14px;
    font-weight: 400;
    color: #333333;
    margin-bottom: 16px;
    letter-spacing: 0.08em;
    text-transform: uppercase;
  }

  .recipe-content {
    font-size: 14px;
    line-height: 1.8;
    color: #666666;
    white-space: pre-wrap;
  }

  .recipe-ingredients {
    background: #F0F0F0;
    padding: 20px;
    border-left: 2px solid #E5E5E5;
  }

  .recipe-steps {
    counter-reset: step-counter;
  }

  .recipe-step {
    position: relative;
    padding-left: 32px;
    margin-bottom: 16px;
    counter-increment: step-counter;
    color: #666666;
    line-height: 1.8;
  }

  .recipe-step::before {
    content: counter(step-counter);
    position: absolute;
    left: 0;
    top: 2px;
    color: #999999;
    font-size: 12px;
    font-weight: 400;
  }

  .recipe-benefit {
    background: #F0F0F0;
    padding: 20px;
    margin-top: 20px;
    font-size: 13px;
    line-height: 1.8;
    color: #666666;
  }

  .modal-pagination {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 40px;
    border-top: 1px solid #E5E5E5;
  }

  .pagination-btn {
    background: none;
    color: #666666;
    border: 1px solid #D4D4D4;
    padding: 8px 20px;
    cursor: pointer;
    font-size: 13px;
    transition: all 0.2s ease;
    font-weight: 300;
    letter-spacing: 0.05em;
  }

  .pagination-btn:hover:not(:disabled) {
    background: #333333;
    color: #FFFFFF;
    border-color: #333333;
  }

  .pagination-btn:disabled {
    color: #CCCCCC;
    border-color: #E5E5E5;
    cursor: not-allowed;
  }

  .page-indicator {
    font-size: 12px;
    color: #999999;
    letter-spacing: 0.1em;
  }

  /* フローティングボタンの追加スタイル */
  .floating-button-container {
    position: fixed;
    bottom: 30px;
    right: 30px;
    z-index: 9998;
  }

  .floating-toggle-btn {
    width: 72px;
    height: 72px;
    border-radius: 50%;
    background: #000;
    color: white;
    border: none;
    cursor: pointer;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .floating-toggle-btn:hover {
    transform: scale(1.05);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
  }

  .notification-dot {
    position: absolute;
    top: 2px;
    right: 2px;
    width: 12px;
    height: 12px;
    background: #fff;
    border: 2px solid #000;
    border-radius: 50%;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { transform: scale(1); opacity: 1; }
    50% { transform: scale(1.2); opacity: 0.8; }
  }

  

  /* レスポンシブ */
  {% comment %} @media (max-width: 768px) {
    .koji-recipe-container {
      margin: 30px auto;
      padding: 15px;
    }

    .card {
      padding: 24px;
    }

    .card-title {
      font-size: 20px;
    }

    .modal-content {
      width: 95%;
      max-height: 90vh;
    }

    .modal-body {
      padding: 24px;
    }

    .recipe-name {
      font-size: 16px;
    }
  } {% endcomment %}

  /* 現在の問題：固定幅450pxはスマホには大きすぎる */
  @media (max-width: 768px) {
    .form-popup-window {
        /* フルスクリーン表示に変更 */
        bottom: 0;
        right: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        max-height: 100vh;
        border-radius: 0;
    }
    
    .form-popup-body {
        max-height: calc(100vh - 60px);
        padding: 20px;
    }
    
    /* フローティングボタンの位置調整 */
    .floating-button-container {
        bottom: 20px;
        right: 20px;
    }
    
    .floating-toggle-btn {
        width: 64px;
        height: 64px;
    }
  }

</style>

<!-- フローティングボタンのみ -->

<div class="floating-button-container">
  <button class="floating-toggle-btn" onclick="toggleFormWindow()">
    <span class="notification-dot"></span>
    <span style="font-size: 13px; font-weight: bold; line-height: 1.2;">MURO<br>レシピAI</span>
  </button>
</div>

<!-- ポップアップフォームウィンドウ -->
<div class="form-popup-window" id="formPopupWindow">
  <div class="form-popup-content">
    <div class="form-popup-header">
      <h3>パーソナルKOJIレシピ提案</h3>
      <button class="form-close-btn" onclick="toggleFormWindow()">×</button>
    </div>
    
    <div class="form-popup-body">
      <p class="form-subtitle">
        あなたの今の体調や食事の希望に合わせて<br>
        MUROの麹製品を使った特別なレシピをご提案します
      </p>
      
          <form id="kojiRecipeForm">
            <div class="form-group">
              <label for="userConditionInput">現在の体調やお悩み(必須)</label>
              <label for="userConditionInput">[例: 疲れやすい, 胃腸が弱り気味]</label>

              <textarea id="userConditionInput" placeholder="{{ section.settings.condition_placeholder }}" required></textarea>
            </div>
            
            <div class="form-group">
              <label for="dietaryNeedsInput">食事で気をつけたいこと（任意）</label>
              <label for="dietaryNeedsInput">[例: 低カロリー, 消化の良いもの]</label>

              <input type="text" id="dietaryNeedsInput" placeholder="{{ section.settings.dietary_placeholder }}">
            </div>
            
            <div class="form-group">
              <label for="kojiTypeSelect">使用したいMUROの麹製品（任意）</label>
              <select id="kojiTypeSelect">
                <option value="">AIにおまかせ</option>
                <option value="麹パウダー">麹パウダー</option>
                <option value="塩麹">塩麹</option>
                <option value="醤油麹">醤油麹</option>
                <option value="甘麹">甘麹</option>
                <option value="トマト麹">トマト麹</option>
                <option value="ハーブ麹">ハーブ麹</option>
                <option value="にんにく麹">にんにく麹</option>
                <option value="玉ねぎ麹">玉ねぎ麹</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="otherIngredientsInput">使いたい食材（任意）</label>
              <input type="text" id="otherIngredientsInput" placeholder="{{ section.settings.ingredients_placeholder }}">
            </div>
            
            <button type="submit" id="generateRecipeBtn" class="submit-button">
              {{ section.settings.button_text }}
            </button>
          </form>
      
          <div id="loadingIndicator" class="loading-container hidden">
            <div class="loading-spinner"></div>
            <p class="loading-text">レシピを作成しています...</p>
          </div>
      
          <div id="errorMessage" class="error-container hidden">
            <p class="error-text"></p>
          </div>
    </div>
  </div>
</div>

<!-- sections/nutrition-widget.liquid の最後の方に追加 -->

<!-- レシピ表示モーダル（これが抜けている） -->
<div id="recipeModal" class="recipe-modal">
  <div class="modal-content">
    <div class="modal-header">
      <h2 class="modal-title">あなたのためのレシピ</h2>
      <button class="modal-close" onclick="closeRecipeModal()">×</button>
    </div>
    
    <div class="modal-body">
      <!-- レシピ1 -->
      <div id="recipePage1" class="recipe-page active">
        <h3 class="recipe-name" id="recipe1Name"></h3>
        <div class="recipe-section">
          <h4 class="recipe-section-title">材料</h4>
          <div class="recipe-ingredients recipe-content" id="recipe1Ingredients"></div>
        </div>
        <div class="recipe-section">
          <h4 class="recipe-section-title">作り方</h4>
          <div class="recipe-steps recipe-content" id="recipe1Steps"></div>
        </div>
        <div class="recipe-section">
          <h4 class="recipe-section-title">このレシピの特徴</h4>
          <div class="recipe-benefit recipe-content" id="recipe1Benefit"></div>
        </div>
      </div>
      
      <!-- レシピ2 -->
      <div id="recipePage2" class="recipe-page">
        <h3 class="recipe-name" id="recipe2Name"></h3>
        <div class="recipe-section">
          <h4 class="recipe-section-title">材料</h4>
          <div class="recipe-ingredients recipe-content" id="recipe2Ingredients"></div>
        </div>
        <div class="recipe-section">
          <h4 class="recipe-section-title">作り方</h4>
          <div class="recipe-steps recipe-content" id="recipe2Steps"></div>
        </div>
        <div class="recipe-section">
          <h4 class="recipe-section-title">このレシピの特徴</h4>
          <div class="recipe-benefit recipe-content" id="recipe2Benefit"></div>
        </div>
      </div>
      
      <!-- レシピ3 -->
      <div id="recipePage3" class="recipe-page">
        <h3 class="recipe-name" id="recipe3Name"></h3>
        <div class="recipe-section">
          <h4 class="recipe-section-title">材料</h4>
          <div class="recipe-ingredients recipe-content" id="recipe3Ingredients"></div>
        </div>
        <div class="recipe-section">
          <h4 class="recipe-section-title">作り方</h4>
          <div class="recipe-steps recipe-content" id="recipe3Steps"></div>
        </div>
        <div class="recipe-section">
          <h4 class="recipe-section-title">このレシピの特徴</h4>
          <div class="recipe-benefit recipe-content" id="recipe3Benefit"></div>
        </div>
      </div>
    </div>
    
    <div class="modal-pagination">
      <button class="pagination-btn prev" onclick="changeRecipePage(-1)" id="prevBtn">
        前のレシピ
      </button>
      <span class="page-indicator" id="pageIndicator">1 / 3</span>
      <button class="pagination-btn next" onclick="changeRecipePage(1)" id="nextBtn">
        次のレシピ
      </button>
    </div>
  </div>
</div>

<script>
  // Azure OpenAI設定
  const AZURE_CONFIG = {
    fullEndpoint: '{{ section.settings.azure_endpoint | default: "https://your-azure-openai-endpoint.com/openai/deployments/gpt-4/chat/completions?api-version=2024-10-21" }}',
    apiKey: '{{ section.settings.azure_api_key | default: "YOUR_AZURE_OPENAI_API_KEY" }}'
  };

  let currentPage = 1;
  const totalPages = 3;
  let generatedRecipes = [];

function toggleFormWindow() {
  const formWindow = document.getElementById('formPopupWindow');
  const isOpen = formWindow.classList.contains('active');
  
  if (isOpen) {
    formWindow.classList.remove('active');
  } else {
    formWindow.classList.add('active');
    // 通知ドットを非表示
    const dot = document.querySelector('.notification-dot');
    if (dot) dot.style.display = 'none';
  }
}

// ウィンドウ外クリックで閉じる
document.addEventListener('click', function(e) {
  const formWindow = document.getElementById('formPopupWindow');
  const button = document.querySelector('.floating-toggle-btn');
  
  if (!formWindow.contains(e.target) && !button.contains(e.target)) {
    formWindow.classList.remove('active');
  }
});

  // 既存のフォーム送信処理（そのまま）
  document.getElementById('kojiRecipeForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitBtn = document.getElementById('generateRecipeBtn');
    const loadingIndicator = document.getElementById('loadingIndicator');
    const errorMessage = document.getElementById('errorMessage');
    
    // UI制御
    submitBtn.disabled = true;
    loadingIndicator.classList.remove('hidden');
    errorMessage.classList.add('hidden');
    
    // フォームデータ取得
    const condition = document.getElementById('userConditionInput').value.trim();
    const needs = document.getElementById('dietaryNeedsInput').value.trim();
    const kojiType = document.getElementById('kojiTypeSelect').value;
    const otherIngredients = document.getElementById('otherIngredientsInput').value.trim();
    
    // プロンプト構築
    const systemPrompt = `あなたは精密栄養学の知識を持つ料理専門家です。ユーザーの健康状態や希望に基づいて、MUROの麹製品を使った健康的で美味しいレシピを提案します。
    
以下の形式で必ず3つのレシピをJSON形式で返してください：
{
  "recipes": [
    {
      "name": "レシピ名",
      "ingredients": "材料リスト（分量も含む）",
      "steps": "作り方（ステップごとに改行）",
      "benefit": "このレシピがユーザーの状況にどう適しているかの説明"
    }
  ]
}

各レシピは異なるアプローチで、ユーザーの状況に対応してください：
1つ目：即効性のある軽めのレシピ
2つ目：栄養バランスを重視した主菜レシピ
3つ目：作り置きできる常備菜レシピ`;

    const userMessage = `ユーザー情報：
- 現在の体調やお悩み：${condition || "特になし"}
- 食事で気をつけたいこと：${needs || "特になし"}
- 使いたいMUROの麹製品：${kojiType || "AIにおまかせ"}
- その他使いたい食材：${otherIngredients || "特になし"}

この情報を基に、3つの異なるパーソナルKOJIレシピを提案してください。`;

    try {
      const response = await fetch(
        AZURE_CONFIG.fullEndpoint,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'api-key': AZURE_CONFIG.apiKey
          },
          body: JSON.stringify({
            messages: [
              {
                role: "system",
                content: systemPrompt
              },
              {
                role: "user",
                content: userMessage
              }
            ],
            temperature: 0.7,
            max_tokens: 2000,
            response_format: { type: "json_object" }
          })
        }
      );
      
      if (!response.ok) {
        throw new Error(`APIエラー: ${response.status}`);
      }
      
      const data = await response.json();
      const content = data.choices[0].message.content;
      
      try {
        const parsedContent = JSON.parse(content);
        generatedRecipes = parsedContent.recipes || [];
        
        if (generatedRecipes.length === 3) {
          displayRecipes();
          openRecipeModal();
        } else {
          throw new Error('レシピの生成に失敗しました');
        }
      } catch (parseError) {
        console.error('JSON解析エラー:', parseError);
        handlePlainTextResponse(content);
      }
      
    } catch (error) {
      console.error('エラー:', error);
      errorMessage.querySelector('p').textContent = 'レシピの生成に失敗しました。もう一度お試しください。';
      errorMessage.classList.remove('hidden');
    } finally {
      submitBtn.disabled = false;
      loadingIndicator.classList.add('hidden');
    }
  });

  // レシピをモーダルに表示
  function displayRecipes() {
    for (let i = 0; i < 3; i++) {
      const recipe = generatedRecipes[i];
      const pageNum = i + 1;
      
      document.getElementById(`recipe${pageNum}Name`).textContent = recipe.name || `レシピ${pageNum}`;
      document.getElementById(`recipe${pageNum}Ingredients`).textContent = recipe.ingredients || '';
      
      // 作り方をステップごとに表示
      const stepsContainer = document.getElementById(`recipe${pageNum}Steps`);
      stepsContainer.innerHTML = '';
      const steps = recipe.steps ? recipe.steps.split('\n').filter(s => s.trim()) : [];
      steps.forEach((step, index) => {
        const stepDiv = document.createElement('div');
        stepDiv.className = 'recipe-step';
        stepDiv.textContent = step.trim();
        stepsContainer.appendChild(stepDiv);
      });
      
      document.getElementById(`recipe${pageNum}Benefit`).textContent = recipe.benefit || '';
    }
  }

  // プレーンテキストレスポンスの処理
  function handlePlainTextResponse(text) {
    const recipes = text.split(/レシピ[1-3]|✨パーソナルKOJIレシピ/gi).filter(r => r.trim());
    
    generatedRecipes = recipes.slice(0, 3).map((recipeText, index) => {
      const lines = recipeText.trim().split('\n');
      return {
        name: `パーソナルKOJIレシピ ${index + 1}`,
        ingredients: lines.find(l => l.includes('材料')) ? 
                    lines.slice(lines.findIndex(l => l.includes('材料')) + 1, 
                                lines.findIndex(l => l.includes('作り方'))).join('\n') : '',
        steps: lines.find(l => l.includes('作り方')) ? 
              lines.slice(lines.findIndex(l => l.includes('作り方')) + 1).join('\n') : '',
        benefit: '精密栄養学に基づいた、あなたの状況に最適なレシピです。'
      };
    });
    
    while (generatedRecipes.length < 3) {
      generatedRecipes.push({
        name: `パーソナルKOJIレシピ ${generatedRecipes.length + 1}`,
        ingredients: '生成中にエラーが発生しました',
        steps: '再度お試しください',
        benefit: ''
      });
    }
    
    displayRecipes();
    openRecipeModal();
  }

  // モーダル制御
  function openRecipeModal() {
    document.getElementById('recipeModal').classList.add('active');
    currentPage = 1;
    showRecipePage(currentPage);
  }

  function closeRecipeModal() {
    document.getElementById('recipeModal').classList.remove('active');
  }

  // ページ切り替え
  function changeRecipePage(direction) {
    const newPage = currentPage + direction;
    if (newPage >= 1 && newPage <= totalPages) {
      currentPage = newPage;
      showRecipePage(currentPage);
    }
  }

  function showRecipePage(pageNum) {
    // すべてのページを非表示
    for (let i = 1; i <= totalPages; i++) {
      document.getElementById(`recipePage${i}`).classList.remove('active');
    }
    
    // 指定ページを表示
    document.getElementById(`recipePage${pageNum}`).classList.add('active');
    
    // ページインジケーター更新
    document.getElementById('pageIndicator').textContent = `${pageNum} / ${totalPages}`;
    
    // ボタン状態更新
    document.getElementById('prevBtn').disabled = pageNum === 1;
    document.getElementById('nextBtn').disabled = pageNum === totalPages;
  }

  // モーダル外クリックで閉じる
  document.getElementById('recipeModal').addEventListener('click', function(e) {
    if (e.target === this) {
      closeRecipeModal();
    }
  });

  // ESCキーで閉じる
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      closeRecipeModal();
    }
  });
</script>

{% schema %}
{
  "name": "KOJIレシピ提案",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_floating_button",
      "label": "フローティングボタンを表示",
      "default": true
    },
    {
      "type": "header",
      "content": "ボタン設定"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "生成ボタンテキスト",
      "default": "麹レシピ生成"
    },
    {
      "type": "header",
      "content": "プレースホルダー設定"
    },
    {
      "type": "text",
      "id": "condition_placeholder",
      "label": "体調・お悩みのプレースホルダー",
      "default": "例：最近、夏バテ気味で食欲がない"
    },
    {
      "type": "text",
      "id": "dietary_placeholder",
      "label": "食事で気をつけたいことのプレースホルダー",
      "default": "例：ビタミンB群を多く摂りたい"
    },
    {
      "type": "text",
      "id": "ingredients_placeholder",
      "label": "使いたい食材のプレースホルダー",
      "default": "例：鶏むね肉、豆腐"
    },
    {
      "type": "header",
      "content": "API設定"
    },
    {
      "type": "text",
      "id": "azure_endpoint",
      "label": "Azure OpenAI エンドポイント",
      "info": "APIのエンドポイントURL"
    },
    {
      "type": "text",
      "id": "azure_api_key",
      "label": "Azure API キー",
      "info": "セキュリティのため、環境変数での管理を推奨"
    }
  ],
  "presets": [
    {
      "name": "KOJIレシピ提案フォーム",
      "category": "カスタム機能"
    }
  ]
}
{% endschema %}